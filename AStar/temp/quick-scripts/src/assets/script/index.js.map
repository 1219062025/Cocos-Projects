{"version":3,"sources":["assets\\script\\index.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import AStar, { Point } from \"./util/AStar\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class NewClass extends cc.Component {\r\n\r\n    @property(cc.TiledMap)\r\n    Map:cc.TiledMap = null;    //地图\r\n\r\n    @property(cc.Node)\r\n    Folder_box:cc.Node = null;         //所有方块都在这个node下\r\n    @property(cc.Node)\r\n    Folder_route:cc.Node = null;        //路块在这个节点下\r\n\r\n    @property(cc.Node)\r\n    Node_start:cc.Node = null;   //起始节点  红色方块\r\n    @property(cc.Node)\r\n    Node_end:cc.Node = null;     //结束节点  蓝色方块\r\n    @property(cc.Node)\r\n    Node_go:cc.Node = null;      //移动节点  绿色方块\r\n    @property(cc.Prefab)\r\n    Prefab_route:cc.Prefab = null;  //路线提示方块\r\n\r\n    layer_road:cc.TiledLayer = null;    //临时记录\r\n    layer_wall:cc.TiledLayer = null;    //临时记录\r\n\r\n    start_point:Point = null;     //起始point\r\n    end_point:Point = null;       //结束point\r\n    map_point:Map<number,Point> = new Map();     //地图 索引\r\n    route:Array<Point> = [];    //路线\r\n    size:cc.Size = null;        //地图尺寸\r\n\r\n    onLoad(){\r\n        this.readMap();\r\n    }\r\n\r\n    /**\r\n     * 读取地图，得到可以走的全部地块索引   （地图的xy是从左上角到右下角）\r\n     */\r\n    readMap(){\r\n        this.layer_road = this.Map.getLayer(\"road\").getComponent(cc.TiledLayer);\r\n        this.layer_wall = this.Map.getLayer(\"wall\").getComponent(cc.TiledLayer);\r\n        this.size = this.Map.getMapSize();\r\n        //地板  全部加进去\r\n        for(let x=0;x<this.size.width;x++){\r\n            for(let y=0;y<this.size.height;y++){\r\n                let tiled =this.layer_road.getTiledTileAt(x,y,true);\r\n                if(tiled.gid!=0){\r\n                    let point = new Point(x,y);\r\n                    this.map_point.set(x+y*this.size.width,point);\r\n                }\r\n            }\r\n        }\r\n        //墙  不要\r\n        for(let x=0;x<this.size.width;x++){\r\n            for(let y=0;y<this.size.height;y++){\r\n                let tiled =this.layer_wall.getTiledTileAt(x,y,true);\r\n                if(tiled.gid!=0){\r\n                    this.map_point.delete(x+y*this.size.width);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设定一个起始位置\r\n     */\r\n    setStart(){\r\n        this.start_point = this.getRandomPoint();\r\n        this.Node_start.setPosition(this.layer_road.getTiledTileAt(this.start_point.x,this.start_point.y,false).node.position);\r\n    }\r\n\r\n    /**\r\n     * 设定一个终点位置\r\n     */\r\n    setEnd(){\r\n        this.end_point = this.getRandomPoint();\r\n        this.Node_end.setPosition(this.layer_road.getTiledTileAt(this.end_point.x,this.end_point.y,false).node.position);\r\n    }\r\n\r\n    /**\r\n     * 获取一个随机的point\r\n     */\r\n    getRandomPoint(){\r\n        let r = Math.floor(Math.random()*this.size.width*this.size.height);\r\n        let point = this.map_point.get(r);\r\n        if(!point){\r\n            point = this.getRandomPoint();\r\n        }\r\n        return point;  \r\n    }\r\n\r\n    /**\r\n     * 生成路线\r\n     */\r\n    getRoute(){\r\n        if(!this.start_point){\r\n            console.error(\"你还没有设置起点\");\r\n            return;\r\n        }\r\n        if(!this.end_point){\r\n            console.error(\"你还没有设置终点\");\r\n            return;\r\n        }\r\n        //调用工具类获取路线\r\n        this.route = AStar.getRoute(this.start_point,this.end_point,this.map_point,this.size);\r\n        if(this.route.length==0){\r\n            console.log(\"没有找到路径\");\r\n        }\r\n        //黑色方块提示出来看看,先清空之前的\r\n        this.Folder_route.removeAllChildren();\r\n        this.i = 0;\r\n        this.route.forEach(point=>{\r\n            let tiled = this.layer_road.getTiledTileAt(point.x,point.y,false);\r\n            let node = cc.instantiate(this.Prefab_route);\r\n            this.Folder_route.addChild(node);\r\n            node.setPosition(tiled.node.position);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 按照路线移动\r\n     */\r\n    i:number = 0;\r\n    move(){\r\n        if(this.i==this.route.length){  //表示走完了\r\n            return;\r\n        }\r\n        let point = this.route[this.i++];\r\n        cc.tween(this.Node_go).to(.2,{position:this.layer_road.getTiledTileAt(point.x,point.y,false).node.position}).call(()=>{this.move();}).start();\r\n    }\r\n}\r\n"]}