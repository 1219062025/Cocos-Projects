CCEffect %{
  techniques:
  - name: "snowflakes"
    passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
          - blend: true
      properties:
        texture: {value: white}
        iResolution: { value: [1, 1] }
        iTime: { value: 0 }
        _SnowflakeAmount: { value: 200 }
        _BlizardFactor: { value: 0.2 }
}%

CCProgram vs %{
  precision highp float;
  #include <cc-global>
  in vec3 a_position;
  in vec2 a_uv0;
  out vec2 v_uv;

  void main () {
    gl_Position = cc_matViewProj * vec4(a_position, 1.0);
    v_uv = a_uv0;
  }
}%

CCProgram fs %{
  precision highp float;
  #include <cc-global>
  in vec2 v_uv;
  out vec4 fragColor;

  #if USE_TEXTURE
  // uniform ：一致变量。在着色器执行期间一致变量的值是不变的
  // 与const常量不同的是，这个值在编译时期是未知的是由着色器外部初始化的
  // 一致变量在顶点着色器和片段着色器之间是共享的。它也只能在全局范围进行声明。
  uniform sampler2D texture;
  #endif

  uniform Block {
    vec2 iResolution;
    float iTime;
    float _SnowflakeAmount;  
    float _BlizardFactor;
  };

  vec2 uv;

  float rnd(float x) {
    return fract(sin(dot(vec2(x + 47.49, 38.2467 / (x + 2.3)), vec2(12.9898, 78.233))) * (43758.5453));
  }

  float drawCircle(vec2 center, float radius) {
    return 1.0 - smoothstep(0.0, radius, length(uv - center));
  }

  void main () { 
    uv = v_uv;
    fragColor = vec4(0.808, 0.89, 0.918, 1.0);
    float j;

    for (int i = 0; i < int(_SnowflakeAmount); i++) {
      j = float(i);
      float speed = 0.3 + rnd(cos(j)) * (0.7 + 0.5 * cos(j / (float(_SnowflakeAmount) * 0.25)));
      vec2 center = vec2((0.25 - uv.y) * _BlizardFactor + rnd(j) + 0.1 * cos(iTime + sin(j)), mod(sin(j) - speed * (iTime * 1.5 * (0.1 + _BlizardFactor)), 0.65));
      fragColor += vec4(0.09 * drawCircle(center, 0.001 + speed * 0.012));
    }
  }
}%
